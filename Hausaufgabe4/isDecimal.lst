     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 313233342037352A20-         v db "1234 75* 0", 0
    14 00000009 3000               
    15                                      l equ $-v
    16 0000000B 256400                      format db "%d",0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 B800000000                      mov eax, 0
    22 00000005 BB00000000                      mov ebx, 0
    23 0000000A B900000000                      mov ecx, 0
    24 0000000F BA00000000                      mov edx, 0
    25 00000014 BE00000000                      mov esi, 0
    26                                          
    27                                          while:
    28 00000019 BA00000000                          mov edx, 0
    29 0000001E 8A96[00000000]                      mov dl, [v + esi]
    30                                              
    31 00000024 80FA30                              cmp dl, '0'
    32 00000027 7206                                jb nichtZiffer
    33                                              
    34 00000029 80FA39                              cmp dl, '9'
    35 0000002C 7F01                                jg nichtZiffer
    36                                              
    37 0000002E 43                                  inc ebx
    38                                              
    39                                              nichtZiffer:
    40                                              
    41 0000002F 46                                  inc esi
    42 00000030 83FE0B                              cmp esi, l
    43 00000033 7402                                je endWhile
    44                                              
    45 00000035 EBE2                            jmp while
    46                                          
    47                                          endWhile:
    48                                          
    49 00000037 53                                  push dword ebx
    50 00000038 68[0B000000]                        push dword format
    51 0000003D FF15[00000000]                      call [printf]
    52 00000043 83C408                              add esp, 4*2
    53                                          
    54 00000046 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000048 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
