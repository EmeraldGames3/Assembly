     1                                  bits 32 
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, printf              
     6                                  import exit msvcrt.dll    
     7                                  import printf msvcrt.dll   
     8                                  
     9                                  ; our data is declared here (the variables needed by our program)
    10                                  segment data use32 class=data
    11 00000000 2D3132332434                s db "-123$4"
    12                                      l equ $-s
    13 00000006 01000000                    isNegative dd 1
    14 0000000A 4E756D6265723A2025-         format db "Number: %d", 0Ah, 0
    14 00000013 640A00             
    15                                  
    16                                  ; our code starts here
    17                                  segment code use32 class=code
    18                                      start:
    19 00000000 B800000000                      mov eax, 0
    20 00000005 BB00000000                      mov ebx, 0
    21 0000000A BE00000000                      mov esi, 0
    22 0000000F B90A000000                      mov ecx, 10
    23                                          
    24                                          while:
    25 00000014 83FE06                              cmp esi, l
    26 00000017 743A                                je end
    27                                      
    28 00000019 BB00000000                          mov ebx, 0
    29 0000001E 8A9E[00000000]                      mov bl, [s + esi]
    30                                              
    31 00000024 80FB2D                              cmp bl, '-'
    32 00000027 7417                                je negative
    33                                              
    34 00000029 80FB30                              cmp bl, '0'
    35 0000002C 7C0F                                jl notNumber
    36 0000002E 80FB39                              cmp bl, '9'
    37 00000031 770A                                ja notNumber
    38                                              
    39                                              isNumber:
    40 00000033 80EB30                                  sub bl, '0'
    41 00000036 F7E1                                    mul ecx; edx:eax = eax * 10
    42 00000038 01D8                                    add eax, ebx
    43                                                  
    44 0000003A 46                                      inc esi
    45 0000003B EBD7                                    jmp while
    46                                                  
    47                                              notNumber:
    48 0000003D 46                                      inc esi
    49 0000003E EBD4                                    jmp while
    50                                                  
    51                                              negative:
    52 00000040 B9FFFFFFFF                              mov ecx, -1
    53 00000045 890D[06000000]                          mov [isNegative], ecx
    54 0000004B B90A000000                              mov ecx, 10
    55                                                  
    56 00000050 46                                      inc esi
    57 00000051 EBC1                                    jmp while
    58                                              
    59                                          end:
    60 00000053 F72D[06000000]                      imul dword[isNegative]
    61                                              
    62 00000059 50                                  push eax
    63 0000005A 68[0A000000]                        push dword format
    64 0000005F FF15[00000000]                      call [printf]
    65 00000065 83C40C                              add esp, 4*3
    66                                          
    67 00000068 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 0000006A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
