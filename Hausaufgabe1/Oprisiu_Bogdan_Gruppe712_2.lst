     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ;Mit vorzeihen
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 FF                          a db -1
    16 00000001 02                          b db 2
    17 00000002 04                          c db 4
    18 00000003 07000000                    d dd 7
    19 00000007 0600000000000000            e dq 6
    20                                      
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; 2 / (a+ b * c -9) + e - d
    25                                      
    26 00000000 B800000000                      mov eax, 0
    27 00000005 BB00000000                      mov ebx, 0
    28 0000000A B900000000                      mov ecx, 0
    29 0000000F BA00000000                      mov edx, 0
    30                                      
    31 00000014 A0[01000000]                    mov al, [b]
    32 00000019 8A1D[02000000]                  mov bl, [c]
    33 0000001F F6EB                            imul bl; ax = b * c = 2 * 4 = 8
    34 00000021 6689C3                          mov bx, ax; bx = b*c
    35                                          
    36 00000024 A0[00000000]                    mov al, [a]
    37 00000029 6698                            cbw; ax = a
    38 0000002B 6601D8                          add ax,bx; ax = a + b * c = (-1) + 8 = 7
    39 0000002E 6683E809                        sub ax, 9; ax = a + b * c - 9 = 7 - 9 = -2
    40                                          
    41 00000032 6689C3                          mov bx, ax; bx = a + b * c - 9
    42 00000035 66B80200                        mov ax, 2
    43 00000039 66BA0000                        mov dx, 0;dx:ax = 2
    44 0000003D 66F7FB                          idiv bx; ax = 2 / (a + b * c - 9) = 2 / (-2) = -1
    45                                          
    46 00000040 98                              cwde; eax = 2 / (a + b * c - 9)
    47 00000041 99                              cdq; edx:eax = 2 / (a + b * c - 9)
    48                                          
    49 00000042 8B1D[07000000]                  mov ebx, [e]
    50 00000048 8B0D[0B000000]                  mov ecx, [e+4]
    51                                          ;ecx:ebx = e
    52                                          
    53 0000004E F8                              clc
    54 0000004F 01D8                            add eax, ebx
    55 00000051 11CA                            adc edx, ecx
    56                                          ;edx:eax = 2 / (a + b * c - 9) + e = -1 + 6 = 5
    57                                          
    58 00000053 89C3                            mov ebx, eax
    59 00000055 89D1                            mov ecx, edx
    60                                          ;ecx:ebx = 2 / (a + b * c - 9) + e
    61                                          
    62 00000057 A1[03000000]                    mov eax, [d]
    63 0000005C 99                              cdq; edx:eax = d
    64                                          
    65 0000005D F8                              clc
    66 0000005E 29C3                            sub ebx, eax
    67 00000060 19D1                            sbb ecx, edx
    68 00000062 89D8                            mov eax, ebx
    69 00000064 89CA                            mov edx, ecx
    70 00000066 BB00000000                      mov ebx, 0
    71 0000006B B900000000                      mov ecx, 0
    72                                          ; edx:eax = 2 / (a + b * c - 9) + e - d = 5 - 7 = -2
    73                                          
    74                                          ; exit(0)
    75 00000070 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 00000072 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
