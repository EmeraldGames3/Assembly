     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ;Ohne votzeichen
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 02                              a db 2
    16 00000001 0200                            b dw 2
    17 00000003 04000000                        e dd 4
    18 00000007 0400000000000000                x dq 4
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ;(a*a / b + b*b) / (2+b) + e - x
    24                                          
    25 00000000 B800000000                      mov eax, 0
    26 00000005 BB00000000                      mov ebx, 0
    27 0000000A B900000000                      mov ecx, 0
    28 0000000F BA00000000                      mov edx, 0
    29                                          
    30 00000014 A0[00000000]                    mov al, [a]
    31 00000019 B400                            mov ah, 0
    32 0000001B 8A1D[00000000]                  mov bl, [a]
    33 00000021 F6E3                            mul bl; ax = a*a = 4
    34 00000023 66BB0000                        mov bx, 0
    35                                          
    36 00000027 66BA0000                        mov dx, 0; dx:ax = a*a = 4
    37 0000002B 668B1D[01000000]                mov bx, [b]
    38                                          
    39 00000032 66F7F3                          div bx; ax = a*a / b = 4 / 2 = 2
    40 00000035 66BA0000                        mov dx, 0
    41 00000039 6689C1                          mov cx, ax; cx = a*a / b
    42 0000003C 66A1[01000000]                  mov ax, [b]
    43 00000042 668B15[01000000]                mov dx, [b]
    44 00000049 66F7E2                          mul dx; dx:ax = b*b = 2 * 2 = 4
    45                                          
    46 0000004C F8                              clc
    47 0000004D 6689CB                          mov bx, cx
    48 00000050 66B90000                        mov cx, 0
    49 00000054 6601D8                          add ax, bx; ax = ax + bx
    50 00000057 6611CA                          adc dx, cx; dx = dx + cx + cf
    51                                          ;dx:ax = a*a / b + b*b = 2 + 2*2 = 6
    52                                          
    53 0000005A BB00000000                      mov ebx, 0
    54 0000005F B900000000                      mov ecx, 0
    55                                          
    56 00000064 668B1D[01000000]                mov bx, [b]
    57 0000006B 6683C302                        add bx, 2; bx = b + 2
    58                                          
    59 0000006F 66F7F3                          div bx; ax = (a*a / b + b*b) / (b + 2) = 6 / 4 = 1
    60 00000072 6689C3                          mov bx, ax
    61 00000075 B800000000                      mov eax, 0
    62 0000007A 6689D8                          mov ax, bx; eax = (a*a / b + b*b) / (b + 2)
    63                                          
    64 0000007D 8B1D[03000000]                  mov ebx, [e]
    65 00000083 01D8                            add eax, ebx; eax = (a*a / b + b*b) / (b + 2) + e = 1 + 4 = 5
    66 00000085 BA00000000                      mov edx, 0; edx:eax = (a*a / b + b*b) / (b + 2) + e
    67                                          
    68 0000008A 8B1D[07000000]                  mov ebx, [x]
    69 00000090 8B0D[0B000000]                  mov ecx, [x + 4]; ecx:ebx = x
    70                                          
    71 00000096 F8                              clc
    72 00000097 29D8                            sub eax, ebx; eax = eax + ebx
    73 00000099 19CA                            sbb edx, ecx; edx = edx + ecx + cf
    74                                          ; edx:eax = (a*a / b + b*b) / (b + 2) + e - x = 5 - 4 = 1
    75                                          
    76 0000009B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 0000009D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
