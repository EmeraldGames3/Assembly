     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ;Ohne votzeichen
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 02                              a db 2
    16 00000001 02                              b db 2
    17 00000002 04000000                        e dd 4
    18 00000006 0400000000000000                x dq 4
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ;(a*a / b + b*b) / (2+b) + e - x
    24                                          
    25 00000000 B800000000                      mov eax, 0
    26 00000005 BB00000000                      mov ebx, 0
    27 0000000A B900000000                      mov ecx, 0
    28 0000000F BA00000000                      mov edx, 0
    29 00000014 F8                              clc
    30                                          
    31 00000015 A0[00000000]                    mov al,[a]
    32 0000001A 8A1D[00000000]                  mov bl,[a]
    33 00000020 F6E3                            mul bl ; eax = a*a = 4
    34                                          
    35 00000022 8A1D[01000000]                  mov bl,[b]
    36 00000028 F6F3                            div bl ; eax = a*a / b = 4 / 2 = 2
    37 0000002A BB00000000                      mov ebx, 0
    38                                          
    39 0000002F 89C1                            mov ecx, eax ; ecx = a*a / b = 4 / 2 = 2
    40 00000031 B800000000                      mov eax, 0
    41 00000036 8A1D[01000000]                  mov bl, [b]
    42 0000003C A0[01000000]                    mov al, [b]
    43 00000041 F6E3                            mul bl; eax = b*b = 4
    44                                          
    45 00000043 01C8                            add eax, ecx; eax = eax + ecx = a*a / b + b*b = 2 + 4 = 6 
    46 00000045 B900000000                      mov ecx, 0
    47                                          
    48 0000004A 8A0D[01000000]                  mov cl, [b]
    49 00000050 6683C102                        add cx, 2; ecx = b + 2 = 4
    50                                          
    51 00000054 66F7F1                          div cx; eax = (a*a / b + b*b) / ( b + 2 ) = 6 / 4 = 1, EDX = Rest = 2
    52 00000057 BA00000000                      mov edx, 0
    53                                          
    54 0000005C 0305[02000000]                  add eax, [e]; eax = eax + e = (a*a / b + b*b) / (b+2) + e = 1 + 4 = 5
    55 00000062 BA00000000                      mov edx, 0
    56                                          
    57 00000067 2B05[06000000]                  sub eax, dword[x]
    58 0000006D 2B15[0A000000]                  sub edx, dword[x+4]; edx:eax = (a*a / b + b*b) / (b+2) + e - x = 5 - 4 = 1  
    59                                          
    60 00000073 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 00000075 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
