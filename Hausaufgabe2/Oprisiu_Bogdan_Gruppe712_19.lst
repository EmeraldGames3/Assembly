     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;r dd 100100010000010000100 000000 01000b
    14                                      ;t dd 01000010000000001000000100001001b
    15 00000000 08200491                    r dd 1001_0001_0000_0100_0010_0000_0000_1000b
    16 00000004 09810042                    t dd 0100_0010_0000_0000_1000_0001_0000_1001b
    17 00000008 00000000                    q dd 00000000000000000000000000000000b
    18                                      ;q = 0000000 100000100101000010 0100000
    19                                      ;    0100000 100000000001000010 0100000
    20                                      ;r^t=1101001 100000100101000010 0000001
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 B800000000                      mov eax, 0
    26 00000005 BB00000000                      mov ebx, 0
    27 0000000A B900000000                      mov ecx, 0
    28 0000000F BA00000000                      mov edx, 0
    29                                          
    30 00000014 A1[04000000]                    mov eax, [t]
    31 00000019 2500FC0100                      and eax, 00000000000000011111110000000000b; eax enthalt die bits 10-16 von t
    32 0000001E C1E80A                          shr eax, 10; eax enthalt auf die position 0-6 die bits 10-16 von t
    33                                          
    34 00000021 8B1D[04000000]                  mov ebx, [t]
    35 00000027 8B0D[00000000]                  mov ecx, [r]
    36 0000002D 31D9                            xor ecx, ebx; ecx = r xor t = 1101001100000100100000100000001
    37 0000002F 81E1807D0B41                    and ecx, 0000000_111111111111111111_0000000; ecx = 000000_ die bits 7 - 24 von r xor t_000000 = 0000000 100000100101000010 0000000
    37          ******************       warning: dword data exceeds bounds [-w+number-overflow]
    38 00000035 09C8                            or eax, ecx; eax = 0000000_ die bits 7 - 24 von r xor t_ die bits 10-16 von t
    39                                  
    40 00000037 8B0D[00000000]                  mov ecx, [r]
    41 0000003D 81E1E00F0000                    and ecx, 00000000000000000000111111100000b
    42 00000043 C1E114                          shl ecx, 20; die bits 5-11 von r _000000000000000000000000
    43 00000046 09C8                            or eax, ecx; die bits 5-11 von r_ die bits 7 - 24 von r xor t_ die bits 10-16 von t
    44                                          
    45 00000048 A3[08000000]                    mov [q], eax 
    46                                          
    47                                          ; exit(0)
    48 0000004D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 0000004F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
